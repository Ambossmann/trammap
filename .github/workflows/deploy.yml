# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install node dependencies
        run: pnpm install

      - name: Install additional dependencies
        run: sudo apt-get install python3 osmctools osmium-tool wget

      - name: Cache vector tiles
        id: cache-tiles
        uses: actions/cache@v4
        with:
          path: ./public/basetiles
          key: basetiles

      - name: Create tmp dir
        if: steps.cache-tiles.outputs.cache-hit != 'true'
        run: mkdir tmp

      - name: Download raw geodata
        if: steps.cache-tiles.outputs.cache-hit != 'true'
        run: wget https://download.geofabrik.de/europe/germany/bayern-latest.osm.pbf -O "./tmp/bayern-latest.osm.pbf"

      - name: Clip geodata
        if: steps.cache-tiles.outputs.cache-hit != 'true'
        run: osmium extract -b 10.79,47.84,12.32,48.43 --set-bounds "./tmp/bayern-latest.osm.pbf" -o "./tmp/basetiles.osm" --overwrite -v

      - name: Remove tram rails from data
        if: steps.cache-tiles.outputs.cache-hit != 'true'
        run: osmfilter -v "./tmp/basetiles.osm" --drop-ways="railway=tram" --drop-ways="razed:railway=tram" --drop-ways="abandoned:railway=tram" --drop-ways="disused:railway=tram" -o="./tmp/basetiles-reduced.osm"

      - name: Convert OSM XML back to pbf
        if: steps.cache-tiles.outputs.cache-hit != 'true'
        run: osmium cat "./tmp/basetiles-reduced.osm" -o "./tmp/basetiles.pbf" --overwrite -v

      - name: Generate vector tiles
        if: steps.cache-tiles.outputs.cache-hit != 'true'
        uses: systemed/tilemaker@v3.0.0
        with:
          input: ./tmp/basetiles.pbf
          output: ./tmp/basetiles.mbtiles
          config: ./tilemakerconfig.json
          process: ./tilemakerprocess.lua

      - name: Extract Tiles
        if: steps.cache-tiles.outputs.cache-hit != 'true'
        run: python3 ./mbutil/mb-util ./tmp/basetiles.mbtiles ./public/basetiles --image_format=pbf

      - name: Minify data
        shell: pwsh
        run: ./scripts/data_minify.ps1

      - name: Build
        run: pnpm build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload dist repository
          path: "./dist"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
